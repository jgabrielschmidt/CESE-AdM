Preguntas orientadoras
1.	Describa brevemente los diferentes perfiles de familias de microprocesadores/microcontroladores de ARM. Explique alguna de sus diferencias características

ARM creo distintos procesadores con diferentes características, distinguiendo 3 conjuntos:
CORTEX-A: Son procesadores basados en la arquitectura ARMv7-A. Se utilizan para manejar aplicaciones complejas. Por ejemplo, sistemas operativos.
CORTEX-R: Procesadores basados en la arquitectura ARMv7-R. Son de alto rendimiento tienen un tiempo de respuesta rápido.
CORTEX-M: Utilizados para aplicaciones de menor escala, ejemplo microcontroladores, donde los requerimientos principales son el bajo costo, bajo consumo, facilidad de 
uso, entre otras.

Cortex M

1. Describa brevemente las diferencias entre las familias de procesadores Cortex M0, M3 y M4. 

Las diferencias son las siguientes:

-	SysTickTimer: Opcional en M0 y M0+, M3 y M4 lo traen.
Genera interrupciones regularmente. Esto permite hacer cambios de contexto en sistemas operativos, o si no, puede servir para medir el tiempo o como fuente de 
interrupción para alguna tarea en particular.

-	Memory Protection Unit (MPU): M0 no lo trae, los otros sí.
Sirve para proteger la memoria donde se almacenan datos críticos, por ejemplo, los de un sistema operativo, u otorgar permisos de acceso. Capacidad de superponer las 
regiones protegidas de memoria y otorgar distintas prioridades.

-	Memory architecture: M0 y M0+ Von Neumann, M3 y M4 Harvard
Arquitecrtura Von Neumann: En esta arquitectura solo hay un BUS para acceder a la memoria de datos y a las instrucciones del programa. Esto ocasiona que sea más lento 
en la ejecución del programa.
Arquitectura Hardvard: A diferencia de la arquitectura anterior, esta incorpora un BUS más. De esta manera tiene un BUS para acceder a los datos guardados en memoria, 
y otro BUS para acceder a las instrucciones. Esta arquitectura es más rápida. Se dice que tiene acceso concurrente. La desventaja es que consume más y es más cara que 
la anterior.

-	ARM architecture: 

M0 y M0+: utilizan la arquitectura ARMv6-M la cual usa las instrucciones Thumb.
M3 utiliza la arquitectura ARMv7-M y M4 usa la ARMv7E-M donde la E significa “Enhanced” DSP, preparado para el procesamiento digital de señales.

-	Thumb: M0 y M0+ contienen la mayoría de las instrucciones. M3 y M4 contienen todas las instrucciones.
Son un subconjunto de instrucciones de 16 bit del conjunto de instrucciones de ARM. Muchas de estas instrucciones tienen operandos que son implícitos y eso hace que 
los códigos sean más chicos.

-	Thumb-2: M0 y M0+ contienen algunas de las instrucciones. M3 y M4 contienen todas las instrucciones.
Es una extensión del conjunto de instrucciones de Thumb. Pero incorporan instrucciones adicionales de 32 bit. Incluye manipulación de bits y ejecuciones condicionales.

-	Hardware multiply: M0 y M0+ tienen instrucciones con resultados de 32 bit, también las tienen M3 y M4. Pero M3 y M4 añaden instrucciones de multiplicación en 
hardware con resultados de 64 bit.  

-	Hardware divide: M0 y M0+ no poseen esta característica. M3 y M4 si con un cociente de 32 bit.

-	Saturated math instructions: M0 y M0+ no tienen, M3 tiene algunas y M4 tiene todas.
Estas instrucciones pueden operar sobre un byte, palabra o media palabra. El resultado de la operación satura sobre el mayor valor positivo, o el menor valor negativo. Si saturo, un flag cambiara de estado. Ejemplos de instrucciones son: QADD8, QSUB8.

-	DSP extensions: Solo M4 lo tiene. Los demás (MO, M0+ y M3) no lo tienen.
Al tener esta extensión el procesador CORTEX-M4 combina los requerimientos de un DSP y un microcontrolador, siendo útil para aplicaciones multimedia. Trae instrucciones especializadas que realizan una operación de DSP en un solo ciclo de reloj, mientras que los otros CORTEX requieren varios.

-	Floating-Point Unit: Solo M4 lo tiene como opcional. Los demás (MO, M0+ y M3) no lo tienen.
Es una forma de representar un numero decimal siguiendo el estándar IEEE 754. M4 contiene soporte de hardware para instrucciones sobre datos de punto flotante, lo que
optimiza la ejecución de las mismas.

2.	¿Por qué se dice que el set de instrucciones Thumb permite mayor densidad de código? Explique.

Las instrucciones de Thumb son de 16 bit y son un subconjunto de las instrucciones de 32 bit de ARM. Las instrucciones de Thumb tienen el mismo efecto sobre el 
procesador que las instrucciones de ARM, operan como instrucciones de 32 bit con todas sus ventajas solo que el código utilizado para una misma tarea es más pequeño, 
ocupa menos espacio y por lo tanto se puede codificar más en un mismo espacio de memoria.

3.	¿Qué entiende por arquitectura load-store? ¿Qué tipo de instrucciones no posee este tipo de arquitectura? 

El set de instrucciones no opera sobre la memoria directamente. Hay que cargar un dato de la memoria en un registro, aplicarle las instrucciones requeridas por el 
código, y luego guardarlo en memoria.

4.	¿Cómo es el mapa de memoria de la familia?

Tiene un tamaño de 4GB particionada en distintas regiones. Cada región se utiliza principalmente para un uso que puede ser: Código, datos(SRAM), periféricos, 
componentes internos del procesador y debug. Pero el uso de las regiones de memoria es flexible, el código puede funcionar desde la SRAM. El mapa de memoria es igual 
para para toda la familia, esto hace que el código sea reutilizable.

5. ¿Qué ventajas presenta el uso de los “shadowed pointers” del PSP y el MSP?

Existen 2 punteros a la pila. Estos son:

Main Stack Pointer (MSP): El utilizado por default luego del reset, y el que se usa para alocar en la pila los registros de interrupciones, por ejemplo.

Process Stack Pointer (PSP): Solo se utiliza en el hilo del programa, no puede utilizarse para interrupciones. Se utiliza principalmente en aplicaciones embebidas 
corriendo un sistema operativo. 

Cuando una aplicación embebida utiliza un sistema operativo, las tareas utilizan el PSP y cada tarea tiene su propia pila, por otro lado, el MSP será utilizado por 
las excepciones. Esto trae varios beneficios:

-	Si la pila de una tarea sufre algún problema, no afectara a la pila de las otras tareas.
-	El espacio reservado para la pila de cada tarea es el mínimo requerido.
-	Facilita la creación de un SO para el CORTEX-M.


6. Describa los diferentes modos de privilegio y operación del Cortex M, sus relaciones y como se conmuta de uno al otro. Describa un ejemplo en el que se pasa del 
modo privilegiado a no privilegiado y nuevamente a privilegiado.

Estados de operación:
•	Debug: Es un modo posible si el debugger está conectado. En este modo el procesador es detenido por el debugger o algún breakpoint, y no realiza ninguna 
	       instrucción.
•	Thumb: Este modo es cuando el procesador está corriendo código, ejecutando instrucciones Thumb.

Modos de operación:
•	Modo Handler: Cuando el procesador está ejecutando una excepción, como una interrupción. En este modo siempre está en modo privilegiado.
•	Modo Thread: Cuando el procesador está ejecutando código normalmente, pudiendo estar en modo privilegiado o no privilegiado.

El modo privilegiado y no privilegiado sirve para poder separar distintos códigos en base a su criticidad. Si tengo un sistema operativo, es mejor tenerlo funcionando 
en un área de memoria protegida a la que solo se puede acceder en modo privilegiado, y las demás tareas corriendo en modo no privilegiado. Por este motivo el procesador 
puede cambiar de modo privilegiado a no privilegiado, pero no puede hacer lo contrario ya que se daría una falla. Si es necesario hacerlo, se debe cambiar por medio de 
una interrupción. 

Por default, los Cortex-M comienzan a operar en modo Thread privilegiado y en estado Thumb. 


8. ¿Qué ventajas presenta el uso de instrucciones de ejecución condicional (IT)? Dé un Ejemplo

La ventaja es que se pueden ejecutar hasta cuatro instrucciones basadas en la condición de ejecución. Ejemplo de una instrucción IF-THEN-ELSE-THEN-THEN:

CMP R0, #1      	// compara R0 con el valor 1
ITETT NE 		// si no es igual:
ADDNE R0, R0, R1 	// suma R0 = R0 + R1
ADDEQ R0, R0, R3 	// si es igual R0 = R0 + R3
ADDNE R2, R4, #1 	// si no es igual R2 = R4 + 1	
MOVNE R5, R3		// si no es mueve R3 a R5


9. Describa brevemente las excepciones más prioritarias (reset, NMI, Hardfault). 

En los Cortex-M puede haber tres tipos de Reset:
•	Power on Reset: Resetea todo en el microcontrolador. Inclusive en procesador, periféricos y la sesión de debug.
•	System reset: resetea el procesador y los periféricos.
•	Processor reset: solo resetea el procesador. Se mantiene la sesión de debug con el host.
EL Host puede generar un reset del Sistema o del procesador via un registro en el System Control Block (SCB). 

Non Maskable Interrupt (NMI): Puede ser usada por algún periférico, por ejemplo, un timer o un detector de nivel de voltaje, útil para advertir al procesador de una 
tensión fuera de rango.

Hardfault: estas interrupciones se disparan cuando el procesador detecta un error. Por ejemplo, una ejecución de una instrucción desconocida o cuando se recibe un 
mensaje de error al intentar acceder a la memoria. Estas tres interrupciones no se pueden deshabilitar.

10. Describa las funciones principales de la pila. ¿Cómo resuelve la arquitectura el llamado a funciones y su retorno?

La pila es una forma de usar una parte de la memoria como un buffer FIFO (First in – First out). Tiene la función PUSH para guardar los datos, y la función PULL para 
recuperar los datos. Se puede utilizar la pila para:

- Guardar datos temporalmente.
- Pasar información a funciones o subrutinas.
- Almacenar variables locales.
- Mantener el estado del procesador o los valores de los registros cuando se utiliza interrupciones, por ejemplo, estas detienen la ejecución del programa para 
ejecutar otra parte del código, al hacer esto, es necesario guardar el estado de las variables o registros para que el programa siga su ejecución desde el punto en 
que se detuvo.

Como comenté en el párrafo anterior, la arquitectura guarda el contenido de los registros que necesitan cambiar su valor debido al llamado de una función. Cuando la 
función termina, se restauran los valores de los registros utilizando la información almacenada en la pila.

11. Describa la secuencia de reset del microprocesador. 

Luego del reset y antes de ejecutar el programa, los Cortex-M leen las dos primeras palabras de la memoria. Estas dos primeras palabras son: el valor inicial del MSP 
y la dirección de la rutina de Reset. Luego el procesador setea el MSP y el contador del programa (PC) con estos valores. 

12. ¿Qué entiende por “core peripherals”? ¿Qué diferencia existe entre estos y el resto de los periféricos?

Los periféricos internos son los que están dentro de la misma unidad del CORTEX. Se encuentran los siguientes: Nested Vectored Interrupt Controller (NVIC), 
System Control Block (SBC), System timer, Memory Protection Unit (MPU). Estos los brinda ARM junto con el procesador. Los demás periféricos, por ejemplo: ADCs, 
timers, GPIOS, etc se los agregan los fabricantes de microcontroladores.

13. ¿Cómo se implementan las prioridades de las interrupciones? Dé un ejemplo

Las prioridades se asignan con números ascendentes desde la prioridad más alta a la más baja. La prioridad más alta la tiene el Reset y se representa con un número 
negativo (-3), le sigue la NMI y la ´Hard fault´. Estas últimas no son programables, ya vienen definidas, todas las demás – puede haber hasta 256 – son programables. 
Los diseñadores limitan la cantidad de interrupciones que un MPU pueda tener cortando la cantidad de bits, esto se hace para bajar el consumo de potencia y la 
complejidad del NVIC, además de reducir la velocidad. 
Los bits que se sacan son los menos significativos, esto es así porque favorece la portabilidad, por ejemplo, si se quiere un MPU con 8 niveles de prioridad, solo 
tendré los 3 bits superiores del Byte de configuración de prioridades. 


14. ¿Qué es el CMSIS? ¿Qué función cumple? ¿Quién lo provee? ¿Qué ventajas aporta?

Las siglas significan: Cortex Microcontroller Software Interface Standard. Provee bibliotecas standar y funciones para programar CORTEX-M. Hace que sea más fácil la 
reusabilidad de código y la portabilidad. Lo provee ARM. Ademas, provee otras ventajas:

+ Es abierto, es decir cualquiera puede descargarlo y usarlo.
+ De fácil aprendizaje.
+ Los drivers de los dispositivos pueden utilizarse con diferentes compiladores.

15. Cuando ocurre una interrupción, asumiendo que está habilitada ¿Cómo opera el microprocesador para atender a la subrutina correspondiente? Explique con un ejemplo

Al ocurrir una interrupción el procesador pasa por cuatro etapas: Acepta el pedido de interrupción, cumple una secuencia de entrada, ejecuta la interrupción y 
vuelve de la interrupción.

Primera etapa: Se aceptará si el procesador está activo, la interrupción está habilitada y si la interrupción tiene una prioridad más alta que la que pudiera estar 
ejecutándose.

Segunda etapa: Guarda en el stack varios registros y también la dirección a la que tiene que regresar luego de que termine de ejecutar la interrupción. Accede al 
vector de interrupción (Dirección) y luego a la instrucción a ejecutarse. Después actualiza varios registros del NVIC y el core.

Tercera etapa: Ejecuta la rutina de interrupción, se utilizará el MSP para operaciones con el Stack y se operará en modo privilegiado.

Cuarta etapa: En los Cortex-M el regreso desde una interrupción se realiza con una dirección especial llamada EXC_RETURN en el program counter. Luego el procesador 
leerá los registros guardados en la pila para continuar donde estaba antes de la interrupción.

16. ¿Cómo cambia la operación de stacking al utilizar la unidad de punto flotante? 

Los Cortex-M4 son los que tienen unidad de punto flotante, y por default tiene habilitado un modo de operación llamado lazy stacking, esta funcionalidad reserva un 
espacio de memoria para utilizar como stack donde guardara el contenido de los registros utilizados para punto flotante, S0 – S15. Entonces, si se utiliza operaciones 
con punto flotante el procesador guardara ahí el contenido de esos registros, de lo contrario solo quedara reservado el espacio. Este modo de funcionamiento reduce el 
tiempo de respuesta en el llamado a una interrupción, ya que almacena solo los registros necesarios.

17. Explique las características avanzadas de atención a interrupciones: tail chaining y late arrival.

Tail chaining: Cuando se está ejecutando una interrupción y se produce la interrupción de otro de igual o mayor prioridad, el procesador seguirá con la interrupción 
actual (en el caso de que las prioridades sean las mismas) o la suspenderá (En el caso de que la nueva interrupción tenga una prioridad mayor), y atenderá la nueva. 
Cuando termine de ejecutar la interrupción atenderá la que quedó suspendida. Esto evita operar el stack entre la ejecución de cada interrupción, ahorra tiempo y 
energía. 

Late arrival: Se llama así a una interrupción de más alta prioridad que sucede luego de una interrupción de más baja prioridad, mientras el procesador realiza el 
“stacking”. Cuando termine de llenar el stack atenderá la interrupción con la prioridad más alta.


18. ¿Qué es el systick? ¿Por qué puede afirmarse que su implementación favorece la portabilidad de los sistemas operativos embebidos?

Es un timer que puede generar la interrupción “SysTick”. Es de 24 bit, decremental y puede utilizar la frecuencia del procesador o de alguna otra referencia. 
Este timer puede ser utilizado por sistemas operativos en tiempo real en sistemas embebidos, entonces si el sistema operativo fue hecho para un Cortex-M3/M4, el 
mismo podrá ser usado en otro microcontrolador que tenga el mismo procesador. Por otro lado, si no se utiliza un FreeRTOS, este timer puede ser utilizado para 
otros propósitos propios de los timers. 


19. ¿Qué funciones cumple la unidad de protección de memoria (MPU)?

Es una característica opcional, no todos los Cortex la traen y sirve básicamente para proteger ciertas regiones de memoria a través de distintos modos de acceso, 
este puede ser privilegiado o no. Es programable y las funciones que cumple pueden ser:

+ Previene que las aplicaciones corrompan los datos de la pila utilizada por otra aplicación o un sistema operativo. Es decir, reserva memoria para una pila “privada” 
solo para ciertas aplicaciones.
+ Previene que se pueda acceder a ciertos periféricos que pueden ser sensibles al funcionamiento de un sistema.
+ Define una parte de la memoria como no ejecutable, previniendo inyección de código.

20. ¿Cuántas regiones pueden configurarse como máximo? ¿Qué ocurre en caso de haber solapamientos de las regiones? ¿Qué ocurre con las zonas de memoria no cubiertas 
por las regiones definidas? 

En los Cortex M3 y M4 soportan hasta 8 regiones programables. En caso de que un dato quiera ser guardado en una parte de la memoria protegida compartida por dos 
regiones, este será guardado en la región con el número de identificación de división más alto. 

21. ¿Para qué se suele utilizar la excepción PendSV? ¿Cómo se relaciona su uso con el resto de las excepciones? Dé un ejemplo

Es otro tipo de excepción y es importante para soportar operaciones con sistemas embebidos. Tiene la prioridad más baja entre todas las interrupciones, y su función es 
la de esperar a que se terminen de ejecutar todas las interrupciones con prioridades más altas, para que dentro de ella el sistema operativo realice el cambio de 
contexto de una tarea. De este modo el cambio de contexto se retrasará al haber una interrupción ejecutándose antes.
Esto es así, porque en el caso de que un sistema operativo intente realizar un cambio de contexto mientras se está ejecutando una interrupción – es decir intente 
ejecutar otra tarea en el modo Thread interrumpiendo la interrupción – se dará una falla de ejecución. Entonces de este modo volverá al modo Thread cuando termine la 
interrupción de prioridad más baja que es PendSV.

22. ¿Para qué se suele utilizar la excepción SVC? Explíquelo dentro de un marco de un sistema operativo embebido.

Se utiliza para hacer un sistema embebido más robusto, al ser una excepción permite que las aplicaciones, corriendo en modo no privilegiado, accedan mediante el SO 
corriendo en modo privilegiado, a datos u otros recursos como periféricos. Además, al ejecutarse inmediatamente después de ser disparada, no agrega un tiempo 
desconocido hasta la ejecución del SO. También hace que el diseño de las tareas sea más fácil, porque el programador puede abstraerse del hardware utilizado ya que 
esto lo manejaría el SO.


ISA

1. ¿Qué son los sufijos y para qué se los utiliza? Dé un ejemplo

Los sufijos se usan en instrucciones condicionales para realizar una acción dependiendo del resultado. Y luego hay otras con las que se puede actualizar los flags de 
una operación. Ejemplo de instrucción condicional, NE es Not Equal y EQ es Equal:

CMP R0, #0    // compara R0 con el valor 0
ITE   NE      // si no es igual a 0
ADDNE R0, #1  // le sumo 1
ADDEQ  R0, R1 // si es igual le sumo el registro R1

2. ¿Para qué se utiliza el sufijo ‘s’? Dé un ejemplo

Actualiza el registro APSR (Application Program Status Register, such as Carry, Overflow, Zero and Negative flags).Ejemplo: 

ADDS r0, 0x70 // [r0] = 0x70  Actualiza el flag si es que hubo overflow o no.

3. ¿Qué utilidad tiene la implementación de instrucciones de aritmética saturada? Dé un ejemplo con operaciones con datos de 8 bits.

Es útil cuando se hacen procesamiento de datos, por ejemplo, si al realizar una operación aritmética el resultado es más grande que el número máximo capaz de representarse 
según la cantidad de bits utilizada, habrá overflow, y el dato interpretado será erróneo. Explícitamente seria: Si en 8 bits tengo 0xFF y le sumo 0x01, el resultado será 
0x00. Si utilizo la aritmética saturada el resultado será: 0xFF. Esto se interpreta como saturación.


4. Describa brevemente la interfaz entre assembler y C ¿Cómo se reciben los argumentos de las funciones? ¿Cómo se devuelve el resultado? ¿Qué registros deben guardarse
 en la pila antes de ser modificados?

Los argumentos de las funciones en asembler se reciben a través de los registros R0 – R3, siendo R0 el primer argumento de la función, R1 el segundo, R2 el tercero y 
R3 el cuarto argumento. También pueden utilizarse los registros S0-S15 en el caso de Cortex-M4 con FPU. Si se necesita pasar más de cuatro parámetros, se utilizará la 
pila. R0 es el registro utilizado para devolver un valor, también puede utilizarse el R1 para devolver un valor de 64 bit.

Si la función en asembler necesita utilizar más registros para realizar operaciones y guardar temporalmente los resultados, se deberá guardar en la pila el valor de 
dichos registros, estos son R4 – R11, R13, R14, y en el caso del Cortex-M4 con unidad de punto flotante se deben guardar los registros S16-S31. Una vez que la función 
termina sus instrucciones y antes de volver a “C”, debe reestablecer el valor de dichos registros desde la pila.
El caso contrario sería una función en asembler que llama a una función en “C”, esta debe guardar los registros R0-R3, R12, S0-S15 ya que la función podría cambiar sus 
valores. También debe guardarse el valor del registro LR o R14 si la función contiene un salto BL o BLX, ya que al ejecutarlo sobrescribirá el valor de dicho registro.

5. ¿Qué es una instrucción SIMD? ¿En qué se aplican y que ventajas reporta su uso? Dé un ejemplo

Es una instrucción que permite realizar múltiples operaciones de datos en paralelo. Es útil cuando por ejemplo se hace el procesamiento de audio pudiendo procesar los 
dos canales, izquierdo y derecho, en paralelo. Es una característica que tiene el Cortex-M4, y hace que el procesamiento de datos sea más veloz, ya que el resultado de 
una instrucción también se aplica a varias salidas al mismo tiempo. Por ejemplo, en el caso de la instrucción SADD8 {Rd,} Rn, Rm, los registros Rn y Rm contienen 4 bytes 
cada uno, la instrucción realiza la suma de cada byte entre Rn y Rm y pone el resultado de cada una de las 4 sumas en Rd, también de 4 bytes, estos últimos 4 bytes 
pueden representar distintas salidas.
